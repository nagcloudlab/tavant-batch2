plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.springframework.experimental.aot' version '0.10.1'
}

group = 'se.magnus.microservices.core.review'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'

ext {
    mapstructVersion = "1.3.1.Final"
    springCloudVersion = "2020.0.3"
}

repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
}

jar {
    enabled = false
}

dependencies {
    implementation project(':api')
    implementation project(':util')
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    // implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'mysql:mysql-connector-java'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation 'io.micrometer:micrometer-registry-prometheus'

    compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    implementation platform('org.testcontainers:testcontainers-bom:1.15.2')
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
    // jvmArgs '-agentlib:native-image-agent=access-filter-file=src/test/resources/access-filter.json,config-output-dir=native-image-agent-output'
}

bootBuildImage {
    builder = "paketobuildpacks/builder:tiny"
    imageName = "hands-on/native-review-service"
    environment = [
        "BP_NATIVE_IMAGE" : "true",
        "BP_NATIVE_IMAGE_BUILD_ARGUMENTS" : "--enable-url-protocols=http,https --initialize-at-build-time=sun.instrument.InstrumentationImpl -H:+AddAllCharsets"
    ]
}